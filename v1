<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Shelf Planner</title>
<style>
  body {
    margin: 0;
    font-family: Arial, sans-serif;
    background: #f8f9fa;
    background-image:
      radial-gradient(circle at 10% 20%, rgba(91, 124, 153, 0.03) 0%, transparent 50%),
      radial-gradient(circle at 80% 80%, rgba(74, 101, 131, 0.03) 0%, transparent 50%),
      radial-gradient(circle at 40% 60%, rgba(91, 124, 153, 0.02) 0%, transparent 50%);
  }
  header {
    background-color: #2C4F6F;
    color: white;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 20px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.2);
  }
  header img {
    height: 40px;
    object-fit: contain;
    user-select: none;
  }
  header h1 {
    margin: 0;
    font-size: 32px;
    font-weight: bold;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    flex-grow: 1;
    text-align: center;
  }
  main {
    display: flex;
    gap: 20px;
    padding: 20px;
  }
  #library, #controls {
    background: white;
    border-radius: 6px;
    box-shadow: 0 2px 6px rgba(0,0,0,0.1);
    padding: 12px;
    height: 80vh;
    overflow-y: auto;
  }
  #library {
    width: 280px;
  }
  #controls {
    width: 180px;
    display: flex;
    flex-direction: column;
  }
  #shelves {
    flex-grow: 1;
    background: white;
    border-radius: 6px;
    box-shadow: 0 2px 6px rgba(0,0,0,0.1);
    padding: 12px;
    height: 80vh;
    overflow-y: auto;
    position: relative;
  }
  h2 {
    margin-top: 0;
  }
  button {
    cursor: pointer;
    border-radius: 4px;
    border: 1px solid #5B7C99;
    background-color: #e6f0ff;
    color: #2C4F6F;
    padding: 8px 16px;
    font-size: 14px;
    margin-bottom: 10px;
  }
  #objects-list {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
  }
  .object-item {
    box-sizing: border-box;
    border: 1px solid #444;
    border-radius: 4px;
    box-shadow: 1px 1px 3px rgba(0,0,0,0.1);
    padding: 6px;
    font-weight: bold;
    font-size: 12px;
    color: #000;
    user-select: none;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    cursor: grab;
    text-align: center;
  }
  .object-info {
    font-weight: normal;
    font-size: 10px;
    white-space: normal;
  }
  .shelving-unit {
    position: relative;
    margin-bottom: 30px;
    border: 1px solid #ddd;
    border-radius: 6px;
    padding: 10px;
    min-height: 150px;
  }
  .shelf-area {
    position: relative;
    border: 1px solid #aaa;
    background-color: #f0f5f9;
    overflow: hidden;
  }
  .placed-object {
    position: absolute;
    border: 1px solid #000;
    border-radius: 4px;
    padding: 6px;
    font-weight: bold;
    font-size: 12px;
    color: #000;
    display: flex;
    justify-content: center;
    align-items: center;
    user-select: none;
  }
</style>
</head>
<body>
<header>
  <img src="https://upload.wikimedia.org/wikipedia/en/thumb/4/47/American_Museum_of_Natural_History_logo.svg/1280px-American_Museum_of_Natural_History_logo.svg.png" alt="AMNH Logo" />
  <h1>Shelf Planner</h1>
  <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/9a/IMLS_logo.svg/2560px-IMLS_logo.svg.png" alt="IMLS Logo" />
</header>
<main>
  <section id="library">
    <h2>Library</h2>
    <button id="sortBtn" title="Sort by Number">Sort by: Number</button>
    <div id="objects-list"></div>
    <input type="file" id="csvFile" accept=".csv" />
  </section>
  <section id="controls">
    <h2>Controls</h2>
    <button id="addUnitBtn">Add Unit</button>
    <button id="exportReportBtn">Export Report (Images & Tables)</button>
    <button id="exportCsvBtn">Export CSV</button>
  </section>
  <section id="shelves">
    <h2>Shelving Units</h2>
    <div id="shelving-units"></div>
  </section>
</main>

<!-- Load html2canvas CDN -->
<script src="https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js"></script>

<script>
  const SCALE = 5;
  const SHELF_WIDTH_IN = 60;
  const TOTAL_SHELF_HEIGHT = 72;

  const colors = {
    Box: { Large: "#ffcc80", Small: "#ffe0b2" },
    Container: { Plastic: "#90caf9", Metal: "#64b5f6" },
    Other: { Misc: "#b0bec5" },
  };

  let units = [{ id: 1, topHeight: 24, bottomHeight: 36 }];
  let placedObjects = [];
  let sortedObjects = [];
  let sortMode = "number";

  const objectsListEl = document.getElementById("objects-list");
  const shelvingUnitsEl = document.getElementById("shelving-units");
  const sortBtn = document.getElementById("sortBtn");
  const addUnitBtn = document.getElementById("addUnitBtn");
  const exportReportBtn = document.getElementById("exportReportBtn");
  const exportCsvBtn = document.getElementById("exportCsvBtn");
  const csvFileInput = document.getElementById("csvFile");

  // Helper to create a DOM object item in library or shelf
  function createObjectElement(obj, isPlaced = false) {
    const div = document.createElement("div");
    div.classList.add(isPlaced ? "placed-object" : "object-item");

    // size in px based on width/depth inches
    div.style.width = obj.width * SCALE + "px";
    div.style.height = obj.depth * SCALE + "px";

    // color
    const bgColor = (colors[obj.type] && colors[obj.type][obj.objectType]) || "#ccc";
    div.style.backgroundColor = bgColor;

    if (isPlaced) {
      div.style.top = obj.y + "px";
      div.style.left = obj.x + "px";
    }

    div.title = `Number: ${obj.number}`;
    div.textContent = obj.number;

    if (!isPlaced) {
      const info = document.createElement("div");
      info.className = "object-info";
      info.innerHTML = `H: ${obj.height}"<br>W: ${obj.width}"<br>D: ${obj.depth}"`;
      div.appendChild(info);
    }
    return div;
  }

  function renderLibrary() {
    objectsListEl.innerHTML = "";
    sortedObjects.forEach(obj => {
      const el = createObjectElement(obj);
      objectsListEl.appendChild(el);
    });
  }

  function renderShelvingUnits() {
    shelvingUnitsEl.innerHTML = "";
    units.forEach(unit => {
      const unitDiv = document.createElement("div");
      unitDiv.className = "shelving-unit";

      const title = document.createElement("h3");
      title.textContent = "Shelving Unit " + unit.id;
      unitDiv.appendChild(title);

      const shelfArea = document.createElement("div");
      shelfArea.className = "shelf-area";
      shelfArea.style.width = SHELF_WIDTH_IN * SCALE + "px";
      shelfArea.style.height = TOTAL_SHELF_HEIGHT * SCALE + "px";

      // Add placed objects for this unit
      placedObjects
        .filter(o => o.unitId === unit.id)
        .forEach(obj => {
          const objEl = createObjectElement(obj, true);
          shelfArea.appendChild(objEl);
        });

      unitDiv.appendChild(shelfArea);
      shelvingUnitsEl.appendChild(unitDiv);
    });
  }

  function sortObjects() {
    if (sortMode === "number") {
      sortedObjects.sort((a,b) => a.number.localeCompare(b.number));
    } else {
      sortedObjects.sort((a,b) => a.height - b.height);
    }
  }

  sortBtn.onclick = () => {
    sortMode = sortMode === "number" ? "height" : "number";
    sortBtn.textContent = `Sort by: ${sortMode === "number" ? "Number" : "Height"}`;
    sortBtn.title = `Sort by ${sortMode === "number" ? "Height" : "Number"}`;
    sortObjects();
    renderLibrary();
  };

  addUnitBtn.onclick = () => {
    const newId = units.length + 1;
    units.push({ id: newId, topHeight: 24, bottomHeight: 36 });
    renderShelvingUnits();
  };

  // CSV Export
  exportCsvBtn.onclick = () => {
    if (sortedObjects.length === 0) {
      alert("No objects to export!");
      return;
    }
    const header = ["ID", "Number", "Height", "Width", "Depth", "Type", "ObjectType"];
    const rows = sortedObjects.map(obj => [
      obj.id, obj.number, obj.height, obj.width, obj.depth, obj.type, obj.objectType
    ]);
    const csvContent =
      "data:text/csv;charset=utf-8," +
      [header, ...rows].map(e => e.join(",")).join("\n");

    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", "storage_objects.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  // Export Report (images + tables)
  exportReportBtn.onclick = async () => {
    if (units.length === 0) {
      alert("No shelving units to export.");
      return;
    }

    try {
      // Capture images of each shelving unit
      const imagesData = [];
      for (const unit of units) {
        const unitEl = [...shelvingUnitsEl.children].find(div => {
          return div.querySelector("h3")?.textContent === `Shelving Unit ${unit.id}`;
        });
        if (!unitEl) continue;
        const canvas = await html2canvas(unitEl, { backgroundColor: null });
        imagesData.push(canvas.toDataURL("image/png"));
      }

      const reportWindow = window.open("", "_blank");
      if (!reportWindow) {
        alert("Please allow popups for this site.");
        return;
      }

      reportWindow.document.write("<html><head><title>Storage Planner Report</title></head><body>");
      reportWindow.document.write("<h1>Storage Planner Report</h1>");

      units.forEach((unit, idx) => {
        reportWindow.document.write(`<h2>Shelving Unit ${unit.id}</h2>`);
        if (imagesData[idx]) {
          reportWindow.document.write(
            `<img src="${imagesData[idx]}" alt="Shelving Unit ${unit.id}" style="max-width:100%;border:1px solid #ccc;margin-bottom:20px;" />`
          );
        }
        reportWindow.document.write("<table border='1' cellpadding='5' cellspacing='0' style='border-collapse: collapse;'>");
        reportWindow.document.write(
          "<tr><th>ID</th><th>Number</th><th>Height</th><th>Width</th><th>Depth</th><th>Type</th><th>ObjectType</th></tr>"
        );
        const objsInUnit = placedObjects.filter(o => o.unitId === unit.id);
        objsInUnit.forEach(o => {
          reportWindow.document.write(
            `<tr><td>${o.id}</td><td>${o.number}</td><td>${o.height}</td><td>${o.width}</td><td>${o.depth}</td><td>${o.type}</td><td>${o.objectType}</td></tr>`
          );
        });
        reportWindow.document.write("</table>");
      });
      reportWindow.document.write("</body></html>");
      reportWindow.document.close();
    } catch (e) {
      alert("Failed to generate report: " + e.message);
    }
  };

  // Load example objects
  function loadExampleObjects() {
    // Sample objects with unique IDs and numbers
    sortedObjects = [
      { id: 1, number: "001", height: 10, width: 12, depth: 8, type: "Box", objectType: "Large" },
      { id: 2, number: "002", height: 8, width: 10, depth: 6, type: "Container", objectType: "Plastic" },
      { id: 3, number: "003", height: 12, width: 14, depth: 10, type: "Box", objectType: "Small" },
      { id: 4, number: "004", height: 7, width: 9, depth: 6, type: "Container", objectType: "Metal" }
    ];
    sortObjects();
    renderLibrary();
  }

  // For demo: place objects randomly in units
  function placeObjectsRandomly() {
    placedObjects = [];
    sortedObjects.forEach((obj, idx) => {
      const unitId = units[(idx % units.length)].id;
      // place roughly randomly within shelf area
      obj.x = Math.random() * (SHELF_WIDTH_IN * SCALE - obj.width * SCALE);
      obj.y = Math.random() * (TOTAL_SHELF_HEIGHT * SCALE - obj.depth * SCALE);
      obj.unitId = unitId;
      placedObjects.push({...obj});
    });
    renderShelvingUnits();
  }

  // CSV Import (optional)
  csvFileInput.addEventListener("change", (evt) => {
    const file = evt.target.files[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = e => {
      const text = e.target.result;
      parseCsv(text);
    };
    reader.readAsText(file);
  });

  function parseCsv(text) {
    const lines = text.trim().split("\n");
    const headers = lines.shift().split(",");
    sortedObjects = lines.map(line => {
      const obj = {};
      const values = line.split(",");
      headers.forEach((header, i) => {
        obj[header.trim()] = values[i].trim();
      });
      // Convert numbers
      obj.id = parseInt(obj.id);
      obj.height = parseFloat(obj.height);
      obj.width = parseFloat(obj.width);
      obj.depth = parseFloat(obj.depth);
      return obj;
    });
    sortObjects();
    renderLibrary();
  }

  // Init
  loadExampleObjects();
  placeObjectsRandomly();
</script>
</body>
</html>
