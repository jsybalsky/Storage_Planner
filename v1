import React, { useState, useRef } from "react";

const SCALE = 10;
const SHELF_WIDTH_IN = 36;
const SHELF_DEPTH_IN = 12;
const TOTAL_SHELF_HEIGHT = 72;

const colors = {
  Furniture: {
    Chair: "#a1c4fd",
    Table: "#c2e9fb",
  },
  Box: {
    Small: "#fbc7a4",
    Large: "#f5a623",
  },
  // ... your other known types and colors
};

const ShelfPlanner = () => {
  const [units, setUnits] = useState([
    { id: 1, topHeight: 18, bottomHeight: 24 },
  ]);
  const [placedObjects, setPlacedObjects] = useState([]);
  const [sortedObjects, setSortedObjects] = useState([]);
  const [draggedObject, setDraggedObject] = useState(null);
  const fileInputRef = useRef(null);
  const [sortMode, setSortMode] = useState("number");
  const [hoveredButton, setHoveredButton] = useState(null);

  // Get known types from colors keys
  const knownTypes = Object.keys(colors);

  // Your CSV or data parsing function, example:
  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      const text = e.target.result;
      // Simple CSV parse example, adapt to your CSV format
      const lines = text.split("\n").filter(Boolean);
      const objs = lines.slice(1).map((line) => {
        const [id, number, height, width, depth, type, objectType, canRotate] = line.split(",");
        // Clean type string
        const cleanType = type?.trim();

        // Only assign type if it exists in knownTypes, else undefined
        const assignedType = knownTypes.includes(cleanType) ? cleanType : undefined;

        return {
          id: parseInt(id),
          number: number,
          height: parseFloat(height),
          width: parseFloat(width),
          depth: parseFloat(depth),
          type: assignedType,
          objectType: objectType?.trim() || "default",
          canRotate: canRotate === "true",
        };
      });

      setSortedObjects(objs);
    };
    reader.readAsText(file);
  };

  const toggleSortMode = () => {
    setSortMode((prev) => (prev === "number" ? "height" : "number"));
  };

  const addUnit = () => {
    setUnits((prev) => [
      ...prev,
      { id: prev.length + 1, topHeight: 18, bottomHeight: 24 },
    ]);
  };

  const exportReport = () => {
    // Your export logic here
    alert("Export Report feature coming soon.");
  };

  const updateShelfHeight = (unitId, isTopShelf, value) => {
    const num = parseInt(value);
    if (isNaN(num) || num < 1 || num > TOTAL_SHELF_HEIGHT - 1) return;

    setUnits((prev) =>
      prev.map((u) =>
        u.id === unitId
          ? isTopShelf
            ? { ...u, topHeight: num }
            : { ...u, bottomHeight: num }
          : u
      )
    );
  };

  const handleMouseDown = (e, obj, isPlaced) => {
    // Your drag start logic here
  };

  const rotateObject = (id) => {
    // Your rotate logic here
  };

  const renderObject = (obj, isPlaced = false, isRotated = false) => {
    const depthPx = obj.depth * SCALE;
    const textColor = "#000"; // Choose based on background if needed
    const isDragging = draggedObject?.id === obj.id;

    const baseStyle = {
      width: obj.width * SCALE,
      height: obj.depth * SCALE,
      backgroundColor: colors[obj.type]?.[obj.objectType] || "#ccc",
      border: "1px solid #333",
      borderRadius: 4,
      padding: 4,
      boxSizing: "border-box",
      cursor: isPlaced ? "grab" : "pointer",
      color: textColor,
      display: "flex",
      flexDirection: "column",
      justifyContent: "space-between",
      userSelect: "none",
      fontSize: 10,
      position: "relative",
    };

    return (
      <div
        key={obj.id}
        style={baseStyle}
        onMouseDown={(e) => handleMouseDown(e, obj, isPlaced)}
        title={`${obj.number} (${obj.height}"H x ${obj.width}"W x ${obj.depth}"D)`}
      >
        <div
          style={{
            fontWeight: "bold",
            fontSize: isRotated && depthPx < 60 ? 8 : 10,
            whiteSpace: "nowrap",
            overflow: "hidden",
            textOverflow: "ellipsis",
            maxWidth: "100%",
          }}
        >
          {obj.number}
        </div>
        <div style={{ fontSize: isRotated && depthPx < 60 ? 7 : 9 }}>
          {(!isRotated || depthPx >= 40) && (
            <>
              H: {obj.height.toFixed(1)}
              <br />
              W: {obj.width.toFixed(1)}
              <br />
              D: {obj.depth.toFixed(1)}
            </>
          )}
          {isRotated && depthPx < 40 && (
            <span>
              {obj.width.toFixed(0)}×{obj.depth.toFixed(0)}
            </span>
          )}
        </div>
        {obj.canRotate && !isDragging && (
          <button
            onClick={(e) => {
              e.stopPropagation();
              rotateObject(obj.id);
            }}
            style={{
              alignSelf: "flex-end",
              fontSize: isRotated && depthPx < 50 ? 12 : 14,
              cursor: "pointer",
              padding: isRotated && depthPx < 50 ? "1px 4px" : "2px 6px",
              marginTop: 2,
              border: "1px solid",
              borderColor:
                textColor === "#fff"
                  ? "rgba(255,255,255,0.3)"
                  : "rgba(0,0,0,0.2)",
              background:
                textColor === "#fff"
                  ? "rgba(255,255,255,0.1)"
                  : "rgba(0,0,0,0.05)",
              color: textColor,
              borderRadius: "3px",
              transition: "all 0.2s ease",
              lineHeight: 1,
            }}
            onMouseEnter={(e) => {
              e.currentTarget.style.background =
                textColor === "#fff"
                  ? "rgba(255,255,255,0.2)"
                  : "rgba(0,0,0,0.1)";
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.background =
                textColor === "#fff"
                  ? "rgba(255,255,255,0.1)"
                  : "rgba(0,0,0,0.05)";
            }}
            title="Rotate"
          >
            ↻
          </button>
        )}
      </div>
    );
  };

  const renderDraggedGhost = () => {
    if (!draggedObject) return null;

    const widthPx = draggedObject.width * SCALE;
    const depthPx = draggedObject.depth * SCALE;

    const backgroundColor =
      colors[draggedObject.type]?.[draggedObject.objectType] || "#ccc";

    const isDarkColor = (color) => {
      const hex = color.replace("#", "");
      if (hex.length === 3) {
        const r = parseInt(hex[0] + hex[0], 16);
        const g = parseInt(hex[1] + hex[1], 16);
        const b = parseInt(hex[2] + hex[2], 16);
        return r * 0.299 + g * 0.587 + b * 0.114 < 128;
      } else if (hex.length === 6) {
        const r = parseInt(hex.substring(0, 2), 16);
        const g = parseInt(hex.substring(2, 4), 16);
        const b = parseInt(hex.substring(4, 6), 16);
        return r * 0.299 + g * 0.587 + b * 0.114 < 128;
      }
      return (
        color.includes("dark") ||
        (color.includes("hsl") &&
          parseInt(color.match(/\d+%\)$/)?.[0] || "50") < 50)
      );
    };

    const darkBackground = isDarkColor(backgroundColor);
    const textColor = darkBackground ? "#fff" : "#000";

    return (
      <div
        style={{
          position: "fixed",
          pointerEvents: "none",
          left: draggedObject.x,
          top: draggedObject.y,
          zIndex: 1000,
          width: widthPx,
          height: depthPx,
          backgroundColor,
          border: "1px solid black",
          padding: 4,
          boxSizing: "border-box",
          fontSize: 10,
          color: textColor,
          display: "flex",
          flexDirection: "column",
          justifyContent: "space-between",
          borderRadius: 4,
          boxShadow: "0 1px 3px rgba(0,0,0,0.2)",
          opacity: 0.9,
        }}
      >
        <div
          style={{
            fontWeight: "bold",
            whiteSpace: "nowrap",
            overflow: "hidden",
            textOverflow: "ellipsis",
          }}
        >
          {draggedObject.number}
        </div>
        <div style={{ fontSize: 9 }}>
          H: {draggedObject.height.toFixed(1)}
          <br />
          W: {draggedObject.width.toFixed(1)}
          <br />
          D: {draggedObject.depth.toFixed(1)}
        </div>
      </div>
    );
  };

  // Prepare detectedTypes set from sortedObjects for legend
  const detectedTypes = new Set(
    sortedObjects
      .map((obj) => obj.type)
      .filter((type) => type && knownTypes.includes(type))
  );

  const buttonStyle = {
    padding: "6px 12px",
    borderRadius: 4,
    border: "1px solid #5B7C99",
    backgroundColor: "#2C4F6F",
    color: "white",
    cursor: "pointer",
  };

  const buttonHoverStyle = {
    backgroundColor: "#1b3350",
  };

  return (
    <div
      style={{
        minHeight: "100vh",
        backgroundColor: "#f8f9fa",
        backgroundImage: `
          radial-gradient(circle at 10% 20%, rgba(91, 124, 153, 0.03) 0%, transparent 50%),
          radial-gradient(circle at 80% 80%, rgba(74, 101, 131, 0.03) 0%, transparent 50%),
          radial-gradient(circle at 40% 60%, rgba(91, 124, 153, 0.02) 0%, transparent 50%)
        `,
        position: "relative",
        overflow: "hidden",
      }}
    >
      {/* Title Header */}
      <div
        style={{
          backgroundColor: "#2C4F6F",
          color: "white",
          padding: "20px",
          textAlign: "center",
          boxShadow: "0 2px 8px rgba(0,0,0,0.2)",
          marginBottom: "20px",
          position: "relative",
          zIndex: 10,
        }}
      >
        <h1
          style={{
            margin: 0,
            fontSize: "32px",
            fontWeight: "bold",
            textShadow: "2px 2px 4px rgba(0,0,0,0.3)",
          }}
        >
          Storage Planner
        </h1>
        <p style={{ margin: "8px 0 0 0", opacity: 0.9, fontSize: "16px" }}>
          Organize and track your storage collection
        </p>
      </div>

      {/* Main content */}
      <div
        style={{
          display: "flex",
          gap: "1rem",
          fontFamily: "Arial, sans-serif",
          padding: "0 10px 10px 10px",
          position: "relative",
          zIndex: 1,
        }}
      >
        {/* Fixed sidebar for legend and controls */}
        <div
          style={{
            width: 220,
            position: "sticky",
            top: 10,
            height: "calc(100vh - 200px)",
            overflowY: "auto",
            border: "2px solid #5B7C99",
            padding: 12,
            boxSizing: "border-box",
            backgroundColor: "#f8f9fa",
            userSelect: "none",
            flexShrink: 0,
            borderRadius: "8px",
            boxShadow: "0 2px 8px rgba(91, 124, 153, 0.2)",
          }}
        >
          <h3
            style={{
              color: "#2C4F6F",
              borderBottom: "2px solid #5B7C99",
              paddingBottom: "8px",
              marginBottom: "16px",
              fontSize: "18px",
            }}
          >
            Controls
          </h3>
          <input
            type="file"
            accept=".csv"
            onChange={handleFileUpload}
            ref={fileInputRef}
            style={{ marginBottom: 10 }}
          />
          <div style={{ marginBottom: 10 }}>
            <button
              onClick={toggleSortMode}
              style={{
                ...buttonStyle,
                ...(hoveredButton === "sort" ? buttonHoverStyle : {}),
                marginRight: 8,
              }}
              onMouseEnter={() => setHoveredButton("sort")}
              onMouseLeave={() => setHoveredButton(null)}
            >
              Sort by {sortMode === "number" ? "Height" : "Number"}
            </button>
            <button
              onClick={addUnit}
              style={{
                ...buttonStyle,
                ...(hoveredButton === "addUnit" ? buttonHoverStyle : {}),
              }}
              onMouseEnter={() => setHoveredButton("addUnit")}
              onMouseLeave={() => setHoveredButton(null)}
            >
              Add Unit
            </button>
          </div>
          <button
            onClick={exportReport}
            style={{
              ...buttonStyle,
              width: "100%",
              ...(hoveredButton === "export" ? buttonHoverStyle : {}),
            }}
            onMouseEnter={() => setHoveredButton("export")}
            onMouseLeave={() => setHoveredButton(null)}
          >
            Export Report
          </button>

          <h3
            style={{
              color: "#2C4F6F",
              borderBottom: "2px solid #5B7C99",
              paddingBottom: "8px",
              marginTop: 24,
              marginBottom: 12,
              fontSize: "18px",
            }}
          >
            Legend
          </h3>
          <div
            style={{
              maxHeight: 200,
              overflowY: "auto",
              paddingRight: 6,
            }}
          >
            {Array.from(detectedTypes).map((type) => (
              <div
                key={type}
                style={{
                  fontWeight: "bold",
                  fontSize: 14,
                  padding: "6px 0 4px 0",
                  color: "#333",
                }}
              >
                {type}
                <div style={{ marginLeft: 12, marginTop: 4 }}>
                  {Object.entries(colors[type]).map(([objectType, color]) => (
                    <div
                      key={objectType}
                      style={{
                        marginBottom: 4,
                        fontWeight: "normal",
                        display: "flex",
                        alignItems: "center",
                      }}
                    >
                      <div
                        style={{
                          backgroundColor: color,
                          width: 16,
                          height: 16,
                          borderRadius: 3,
                          marginRight: 6,
                          border: "1px solid #aaa",
                        }}
                      />
                      {objectType}
                    </div>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Main planner area */}
        <div
          style={{
            flexGrow: 1,
            border: "2px solid #5B7C99",
            padding: 20,
            borderRadius: 8,
            boxShadow: "0 2px 8px rgba(91, 124, 153, 0.2)",
            overflow: "auto",
            minHeight: 600,
            position: "relative",
            backgroundColor: "white",
          }}
        >
          <h2
            style={{
              textAlign: "center",
              fontWeight: "bold",
              marginBottom: 16,
              color: "#2C4F6F",
            }}
          >
            Storage Units & Shelf Planner
          </h2>

          {/* Units list */}
          {units.map((unit) => (
            <div
              key={unit.id}
              style={{
                border: "1px solid #ccc",
                marginBottom: 20,
                padding: 12,
                borderRadius: 6,
                boxShadow: "inset 0 0 8px #eee",
                backgroundColor: "#fefefe",
              }}
            >
              <h4 style={{ margin: "0 0 8px 0", color: "#2C4F6F" }}>
                Unit {unit.id}
              </h4>
              <div
                style={{
                  display: "flex",
                  gap: 12,
                  alignItems: "center",
                  marginBottom: 12,
                }}
              >
                <label style={{ flexShrink: 0, width: 100, fontWeight: "bold" }}>
                  Top Shelf Height:
                </label>
                <input
                  type="number"
                  min={1}
                  max={TOTAL_SHELF_HEIGHT - 1}
                  value={unit.topHeight}
                  onChange={(e) => updateShelfHeight(unit.id, true, e.target.value)}
                  style={{ width: 80, padding: 6, borderRadius: 4, border: "1px solid #ccc" }}
                />
              </div>
              <div
                style={{
                  display: "flex",
                  gap: 12,
                  alignItems: "center",
                }}
              >
                <label style={{ flexShrink: 0, width: 100, fontWeight: "bold" }}>
                  Bottom Shelf Height:
                </label>
                <input
                  type="number"
                  min={1}
                  max={TOTAL_SHELF_HEIGHT - 1}
                  value={unit.bottomHeight}
                  onChange={(e) => updateShelfHeight(unit.id, false, e.target.value)}
                  style={{ width: 80, padding: 6, borderRadius: 4, border: "1px solid #ccc" }}
                />
              </div>
            </div>
          ))}

          {/* Render objects here as needed */}
          <div
            style={{
              display: "flex",
              flexWrap: "wrap",
              gap: 12,
              paddingTop: 10,
              borderTop: "1px solid #ccc",
            }}
          >
            {sortedObjects.map((obj) => renderObject(obj, false, false))}
          </div>

          {/* Dragged ghost */}
          {renderDraggedGhost()}
        </div>
      </div>
    </div>
  );
};

export default ShelfPlanner;
